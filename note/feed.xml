<!doctype html>
<meta charset="utf-8">
<title>note画像テスト（ミラー版）</title>
<div id="card" style="max-width:780px;margin:24px auto;font:16px/1.6 system-ui"></div>
<pre id="log" style="max-width:780px;margin:0 auto;color:#c00;white-space:pre-wrap"></pre>

<script>
(async () => {
  const RSS = "/note/feed.xml";                             // Actionsで作ったミラー
  const FALLBACK = "https://assets.st-note.com/production/uploads/images/default/ogp.png";
  const mediaNS = "http://search.yahoo.com/mrss/";

  const abs = (u)=>{
    if (!u) return "";
    if (/^https?:\/\//i.test(u)) return u;
    if (u.startsWith("//")) return "https:" + u;
    if (u.startsWith("/"))  return "https://note.com" + u;
    return u;
  };
  const prox = (u)=> u ? `https://images.weserv.nl/?url=${encodeURIComponent(u.replace(/^https?:\/\//,''))}&output=jpg` : "";

  try {
    // RSS を取得（キャッシュ避け）
    const res = await fetch(RSS + "?t=" + Date.now(), { cache: "no-store" });
    if (!res.ok) throw new Error("mirror fetch failed: " + res.status);
    const xml = new DOMParser().parseFromString(await res.text(), "text/xml");

    const it = xml.querySelector("item");
    if (!it) throw new Error("item not found in feed.xml");

    const title = it.querySelector("title")?.textContent ?? "";
    const link  = it.querySelector("link")?.textContent ?? "#";

    // ---- 画像抽出（ここで初めて it を使う）----
    let raw = "";

    // 1) media:thumbnail（NS対応）
    const thumbs = it.getElementsByTagNameNS(mediaNS, "thumbnail");
    if (thumbs && thumbs.length) {
      const n = thumbs[0];
      raw = (n.getAttribute("url") || n.textContent || "").trim();
    }

    // 2) enclosure
    if (!raw) {
      const enc = it.querySelector("enclosure[url]");
      if (enc) raw = enc.getAttribute("url") || "";
    }

    // 3) content:encoded / description 内の <img>
    if (!raw) {
      const html = it.querySelector("content\\:encoded")?.textContent
                || it.querySelector("description")?.textContent || "";
      if (html) {
        const decoded = new DOMParser().parseFromString(html, "text/html").documentElement.textContent || html;
        const d = new DOMParser().parseFromString(decoded, "text/html");
        const img = d.querySelector("img");
        raw = (img?.getAttribute("src")
            || img?.getAttribute("data-src")
            || img?.getAttribute("data-original")
            || "").trim();
      }
    }

    // 4) 絶対化 + フォールバック
    const img = abs(raw || FALLBACK);
    const srcProx = prox(img);

    document.getElementById("card").innerHTML = `
      <a href="${link}" target="_blank" rel="noopener" style="display:block;color:inherit;text-decoration:none">
        <div style="aspect-ratio:16/9;background:#eee;border-radius:12px;overflow:hidden;box-shadow:0 4px 16px rgba(0,0,0,.08)">
          <img src="${srcProx}" alt="${title}" loading="eager"
               style="width:100%;height:100%;object-fit:cover;display:block"
               onerror="this.onerror=null; this.src='https://images.weserv.nl/?url=assets.st-note.com/production/uploads/images/default/ogp.png&output=jpg'">
        </div>
        <div style="padding:12px 14px"><strong>${title}</strong></div>
      </a>
      <div style="font-size:12px;color:#666;padding:0 14px 12px">
        raw: ${img}<br>proxied: ${srcProx}
      </div>
    `;
  } catch (e) {
    document.getElementById("log").textContent = "ERROR: " + (e?.message || e);
    console.error(e);
  }
})();
</script>
